Introduction to Flask  <Under Construction>What Topics Are We Covering?  Flask Layout  The standard Flask app directory tree looks something like:Parent Directory/ |__app.py      // this Python file contains the code for running your app; can be renamed to something else |__templates/  // this folder has to be named 'templates'; place where all your html files are located |__static/     // only the 'static' folder is open to public access; store your css, js, images, and etc. |__utils/      // named 'util' for convention; place for all your other Python files |__data/       // named 'data' for convention; place where you store any data and/or database files Basic Flask  Let us start with a basic Flask app:# import the Flask class from the flask library from flask import Flask  # Generate an instance of the Flask class.  The first argument is the name of the module allowing Flask to # search for your templates, static files, and etc. app = Flask(__name__)  # The route decorator is used to tell Flask what URL should run the function # The '/' denotes root and is the page that is loaded by default @app.route('/') def home():                  # Standard Python function definition, the name does not need to match the route.     return 'Hello World!'    # Return a message to be rendered in the user's browser  # If the program is ran directly instead of imported... if __name__ == '__main__':     # Turn on debugging enabling more specific error messages than 500 Internal Server Error     app.debug = True         # Auto reloads itself upon code changes     # Run the app     app.run()      # By default, the host is 127.0.0.1 and the port is 5000     # Access the site by typing host:port (127.0.0.1:5000) into the address bar of your browser.      # You may change the port or the host by giving app.run() extra parameters     # Ex: app.run(host=192.0.0.1, port=8000) would change the address to 192.0.0.1:8000 Flask Routes and Blueprints  Under Construction...Flask Templates  In IntroCS2, the way you would render HTML is by printing HTML source code.  Why is this bad?Does not allow for modular design; it is hard to reuse codeSquashes all your HTML and Python together, creating a messSo, how can Flask templates fix this?Reusing your HTML code is as simple as copying a fileSeparates the HTML into the HTML files and Python code into .py filesIntroduces inheritance to eliminate repetitive portionsAllows you to store Python variables and run Python functions directly in your HTML fileSounds too good to be true?  Try it out!  Here is some sample HTML code to be placed into your templates folder:<!DOCTYPE html> <html>     <body>         <h1> Hello World! </h1>         <!-- Use <strong> instead of <b> and <em> instead of <i> (HTML5 standards) -->         <p><strong><em> This is the best web page ever </strong></em></p>     </body> </html> In your Flask app, revise the function definition for home:# Replace the import statement at the top with the following from flask import Flask, render_template  # The '/' denotes root and is the page that is loaded by default @app.route('/') def home():     return render_template('<name of html file>') # Return your html template instead of 'Hello World!' Run your Flask app (make sure the virtualenv is activated!).  Great!  Leave your Flask app running and now let us add some more excitement by throwing some Python in there...<!DOCTYPE html> <html>     <body>         {# This is a comment #}         <h1> Hello World! </h1>          {# Python if statements are allowed if you wrapped them with {% %} #}         {% if 1==1 %}         <p><strong><em> This is the best web page ever </strong></em></p>          {# You can also use elif statements #}         {% elif 1==0 %}         <p> This is the worst web page ever </p>          {# And else statements as well! #}         {% else %}         <p> This is an OK web page... </p>         {# Make sure to close your if/elif/else statement(s) with this one line #}         {% endif %}          {# You can use Python for loops! #}         {% for i in range(100) %}         <p> I am the coolest person ever! </p>          {# You can access the variables by surrounding the expression or variable with {{ }} #}         <p> {{i ** 2}} </p>          {# Close for loop with the following line #}         {% endfor %}          {# You can use while loops as well! #}     </body> </html> Simply refresh the page and Flask would autoload the new html page.WarningNotice that the Python portion is really limited since we do not want to squash HTML and Python in one file. Some Python is allowed to make it easier to do repetitive tasks such as create a table with 100 rows and 20 columns.Flask Server and Client Communication  Under Construction...Python Decorators  Under Construction...